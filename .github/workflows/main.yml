name: CI

on: [push, workflow_dispatch]

jobs:
  build-linux:
    runs-on: ubuntu-20.04
    #container: ${{ matrix.container }}
    #strategy:
    #  matrix:
    #    container: [quay.io/pypa/manylinux1_x86_64, quay.io/pypa/manylinux2014_i686]
    #container: quay.io/pypa/manylinux1_x86_64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Checkout source
      run: |
        pwd
        ls -lh
        echo '---8<---'
        git clone https://github.com/cfyzium/bearlibterminal
    - name: Build Linux binaries
      #if: ${{ false }}
      run: |
        cat << EOF > script.sh
          #!/bin/bash
          mkdir build && cd \$_
          cmake ../workspace/bearlibterminal
          make
        EOF
        chmod a+x ./script.sh
        docker run --rm --mount type=bind,src=`pwd`,dst=/workspace quay.io/pypa/manylinux2014_x86_64 bash -c "workspace/script.sh"
        docker run --rm --mount type=bind,src=`pwd`,dst=/workspace quay.io/pypa/manylinux2014_i686 bash -c "workspace/script.sh"
        tar cvfz artifacts.tgz -C bearlibterminal/Output Linux32 Linux64
        sudo chmod a+rwx bearlibterminal/Output
        sudo chmod -R a+r bearlibterminal/Output/Linux*
    - name: Upload Linux artifacts
      #if: ${{ false }}
      uses: actions/upload-artifact@v2
      with:
        name: linux-binaries
        path: ${{ github.workspace }}/artifacts.tgz
    - name: Install MinGW
      run: sudo apt install gcc-mingw-w64 g++-mingw-w64
    - name: Build Windows binaries
      run: |
        cat << EOF > mingw.cmake
          set(CMAKE_SYSTEM_NAME Windows)
          set(CMAKE_C_COMPILER \${MINGW_ARCH}-w64-mingw32-gcc-posix)
          set(CMAKE_CXX_COMPILER \${MINGW_ARCH}-w64-mingw32-g++-posix)
          set(CMAKE_RC_COMPILER \${MINGW_ARCH}-w64-mingw32-windres)
          set(CMAKE_FIND_ROOT_PATH /usr/\${MINGW_ARCH}-w64-mingw32)
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
        EOF
        cat << EOF > script.sh
          #!/bin/bash
          rm -rf build && mkdir build && cd \$_
          cmake -DMINGW_ARCH=\$1 -DCMAKE_TOOLCHAIN_FILE=../mingw.cmake ../bearlibterminal
          make
        EOF
        chmod a+x ./script.sh
        ./script.sh x86_64
        ./script.sh i686
    - name: Upload MinGW artifacts
      uses: actions/upload-artifact@v2
      with:
        name: mingw-binaries
        path: ${{ github.workspace }}/bearlibterminal/Output/Windows*
    - name: Install pip/wheel
      run: sudo apt install python3-pip python3-wheel
    - name: Build Python wheels
      run: |
        cat << EOF > build-wheel.sh
          #!/bin/bash
          cp -R bearlibterminal/Terminal/Include/Python ./
          cp bearlibterminal/CHANGELOG.md Python/
          cp \$1 Python/bearlibterminal/
          pip3 wheel --build-option "--python-tag=py2.py3" --build-option "--plat-name=\$2" -w ./ ./Python
          rm -rf Python
        EOF
        chmod a+x build-wheel.sh
        ./build-wheel.sh bearlibterminal/Output/Linux32/libBearLibTerminal.so manylinux1_i636
        ./build-wheel.sh bearlibterminal/Output/Linux64/libBearLibTerminal.so manylinux1_x86_64
        ./build-wheel.sh bearlibterminal/Output/Windows32/BearLibTerminal.dll win32
        ./build-wheel.sh bearlibterminal/Output/Windows64/BearLibTerminal.dll win_amd64
    - name: Upload Python wheels
      uses: actions/upload-artifact@v2
      with:
        name: python-wheels
        path: ${{ github.workspace }}/*.whl
